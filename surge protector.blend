import bpy
import math

# Clear scene
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# Materials
def create_wood_material():
    mat = bpy.data.materials.new("WoodMaterial")
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    links = mat.node_tree.links

    nodes.clear()

    output = nodes.new(type='ShaderNodeOutputMaterial')
    principled = nodes.new(type='ShaderNodeBsdfPrincipled')
    texture = nodes.new(type='ShaderNodeTexNoise')
    bump = nodes.new(type='ShaderNodeBump')

    texture.inputs['Scale'].default_value = 30.0
    texture.inputs['Detail'].default_value = 6.0
    texture.inputs['Roughness'].default_value = 0.6

    links.new(texture.outputs['Fac'], bump.inputs['Height'])
    links.new(bump.outputs['Normal'], principled.inputs['Normal'])
    links.new(principled.outputs['BSDF'], output.inputs['Surface'])

    principled.inputs['Base Color'].default_value = (0.45, 0.25, 0.1, 1)
    principled.inputs['Roughness'].default_value = 0.5

    return mat

wood_mat = create_wood_material()

black_mat = bpy.data.materials.new("BlackMat")
black_mat.use_nodes = True
nodes = black_mat.node_tree.nodes
principled = nodes.get("Principled BSDF")
principled.inputs['Base Color'].default_value = (0.05, 0.05, 0.05, 1)
principled.inputs['Roughness'].default_value = 0.2

usb_mat = bpy.data.materials.new("USBMat")
usb_mat.use_nodes = True
nodes = usb_mat.node_tree.nodes
principled = nodes.get("Principled BSDF")
principled.inputs['Base Color'].default_value = (0.3, 0.3, 0.3, 1)
principled.inputs['Roughness'].default_value = 0.4

cable_mat = bpy.data.materials.new("CableMat")
cable_mat.use_nodes = True
nodes = cable_mat.node_tree.nodes
principled = nodes.get("Principled BSDF")
principled.inputs['Base Color'].default_value = (0.02, 0.02, 0.02, 1)
principled.inputs['Roughness'].default_value = 0.5

# Dimensions (meters)
box_length = 0.25
box_width = 0.08
box_height = 0.08
wall_thickness = 0.01
planter_depth = 0.03

# Wooden box outer shell
bpy.ops.mesh.primitive_cube_add(size=1, location=(0,0,box_height/2))
box_outer = bpy.context.object
box_outer.name = "WoodBoxOuter"
box_outer.scale = (box_length/2, box_width/2, box_height/2)
box_outer.data.materials.append(wood_mat)

# Hollow box inside
bpy.ops.mesh.primitive_cube_add(size=1, location=(0,0,box_height/2 - wall_thickness))
box_inner = bpy.context.object
box_inner.name = "WoodBoxInner"
box_inner.scale = ((box_length-2*wall_thickness)/2, (box_width-2*wall_thickness)/2, (box_height-wall_thickness)/2)

bool_mod = box_outer.modifiers.new(name="Hollow", type='BOOLEAN')
bool_mod.operation = 'DIFFERENCE'
bool_mod.object = box_inner

bpy.context.view_layer.objects.active = box_outer
bpy.ops.object.modifier_apply(modifier=bool_mod.name)
bpy.data.objects.remove(box_inner, do_unlink=True)

# Planter cavity on top (empty)
bpy.ops.mesh.primitive_cube_add(size=1, location=(0,0,box_height - planter_depth/2))
planter_cavity = bpy.context.object
planter_cavity.name = "PlanterCavity"
planter_cavity.scale = ((box_length-2*wall_thickness)/2, (box_width-2*wall_thickness)/2, planter_depth/2)

bool_mod2 = box_outer.modifiers.new(name="PlanterCut", type='BOOLEAN')
bool_mod2.operation = 'DIFFERENCE'
bool_mod2.object = planter_cavity

bpy.context.view_layer.objects.active = box_outer
bpy.ops.object.modifier_apply(modifier=bool_mod2.name)
bpy.data.objects.remove(planter_cavity, do_unlink=True)

# Power strip faceplate on front
faceplate_width = 0.14
faceplate_height = 0.05
faceplate_thickness = 0.008
faceplate_x = 0
faceplate_y = box_width/2 + faceplate_thickness/2 - 0.001

bpy.ops.mesh.primitive_cube_add(size=1, location=(faceplate_x, faceplate_y, box_height/2))
faceplate = bpy.context.object
faceplate.name = "PowerStripFaceplate"
faceplate.scale = (faceplate_width/2, faceplate_thickness/2, faceplate_height/2)
faceplate.data.materials.append(black_mat)

# Outlet holes creator
def create_outlet_hole(location):
    bpy.ops.mesh.primitive_cylinder_add(radius=0.0045, depth=0.005, location=location, rotation=(math.radians(90),0,0))
    hole = bpy.context.object
    hole.name = "OutletHole"
    return hole

# Outlets base rectangles and holes
outlet_width = 0.025
outlet_height = 0.035
outlet_thickness = 0.001
outlet_spacing = 0.045
start_x = faceplate_x - outlet_spacing

for i in range(3):
    x = start_x + i * outlet_spacing
    bpy.ops.mesh.primitive_cube_add(size=1, location=(x, faceplate_y + 0.002, box_height/2))
    base = bpy.context.object
    base.name = f"OutletBase_{i+1}"
    base.scale = (outlet_width/2, outlet_thickness/2, outlet_height/2)
    base.data.materials.append(usb_mat)

    hole_y = faceplate_y + 0.003
    hole_z_center = box_height/2
    hole_x = x

    # Two vertical holes
    create_outlet_hole((hole_x - 0.006, hole_y, hole_z_center + 0.008))
    create_outlet_hole((hole_x + 0.006, hole_y, hole_z_center + 0.008))
    # Ground hole below
    create_outlet_hole((hole_x, hole_y, hole_z_center - 0.007))

# USB ports with slot details
usb_width = 0.02
usb_height = 0.012
usb_thickness = 0.002

usb_x = faceplate_x + faceplate_width/2 - usb_width/2 - 0.01
usb_y = faceplate_y + 0.002
usb_z_start = box_height/2 + usb_height/2

for i in range(2):
    z = usb_z_start - i * (usb_height + 0.008)
    bpy.ops.mesh.primitive_cube_add(size=1, location=(usb_x, usb_y, z))
    usb_base = bpy.context.object
    usb_base.name = f"USBPortBase_{i+1}"
    usb_base.scale = (usb_width/2, usb_thickness/2, usb_height/2)
    usb_base.data.materials.append(usb_mat)

    bpy.ops.mesh.primitive_cube_add(size=1, location=(usb_x, usb_y + 0.0015, z))
    slot = bpy.context.object
    slot.name = f"USBSlot_{i+1}"
    slot.scale = (usb_width/3, usb_thickness*2, usb_height/6)
    slot_mat = bpy.data.materials.new("SlotMat")
    slot_mat.diffuse_color = (0,0,0,1)
    slot.data.materials.append(slot_mat)

# Power cable as a coiled curve with bevel
curve_data = bpy.data.curves.new(name='CableCurve', type='CURVE')
curve_data.dimensions = '3D'
polyline = curve_data.splines.new('POLY')
num_points = 50
polyline.points.add(num_points-1)

radius = 0.007
coil_radius = 0.02
coil_turns = 3
height = 0.12

for i in range(num_points):
    angle = (coil_turns * 2 * math.pi) * (i / (num_points - 1))
    x = box_length/2 + coil_radius * math.cos(angle)
    y = coil_radius * math.sin(angle)
    z = i * (height / (num_points - 1))
    polyline.points[i].co = (x, y, z, 1)

curve_obj = bpy.data.objects.new('PowerCableCurve', curve_data)
bpy.context.collection.objects.link(curve_obj)

bpy.ops.curve.primitive_bezier_circle_add(radius=radius)
bevel_obj = bpy.context.object
bevel_obj.name = 'CableBevel'

curve_data.bevel_object = bevel_obj
curve_data.bevel_mode = 'OBJECT'

if len(curve_obj.data.materials):
    curve_obj.data.materials[0] = cable_mat
else:
    curve_obj.data.materials.append(cable_mat)

print("Wooden surge protector model with power strip created.")
